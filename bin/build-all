#!/bin/bash

set -eu

# Defaults
mode=dev
dryrun=0
allow_dirty_release=0

# In release mode, all destination directories have a version
# appended.  This is not done in dev mode

args=()

# Parse arguments
while [ $# -gt 0 ]; do
    if [[ $1 =~ --.* ]]; then
        case "$1" in
            --mode)
                mode="$2"
                if [[ "$mode" != "dev" && "$mode" != "release" ]]; then
                    echo "$0: --mode MODE; MODE should be either 'dev' or 'release'" >&2
                    exit 1
                fi
                shift 2
                ;;
            --dry-run)
                dryrun=1
                shift 1
                ;;
            --allow-dirty-release)
                allow_dirty_release=1
                shift 1
                ;;
            --*)
                echo "Unrecognized option $1" >&2
                exit 1
                ;;
        esac
    else
        args+=($1)
        shift
    fi
done

if [ -z "${args+1}" ]; then
    nargs=0
else
    nargs=${#args[@]}
fi

if [ $nargs = 0 ]; then
    echo "$0: ERROR; please provide a destination directory argument" >&2
    exit 1
elif [ $nargs -gt 1 ]; then
    echo "$0: ERROR; too many arguments" >&2
    exit 1
else
    destdir=${args[0]}
fi

csluma_version=$(git describe --tags --dirty)
if [[ "$csluma_version" =~ dirty && $mode != dev && $allow_dirty_release = 0 ]]; then
    echo "Cannot build a release version with a dirty cs-luma-archer repository" >&2
    exit 1
fi

csluma_version=$(git describe --tags)
if [ csluma_version[0] = "v" ]; then
    csluma_version=${csluma_version:1} # strip leading v
fi

if [ "$mode" = "release" ]; then
    destdir="${destdir}-$csluma_version"
fi

builddir=$PWD/var/build

mkdir -p $destdir

if [ $dryrun = 1 ]; then
    installer_prefix=echo
    echo "Commands that would be run:"
else
    installer_prefix=""
fi

# METIS

metis_version=5.1.0
export METIS_DIR=$destdir/metis-${metis_version}
$installer_prefix bin/build-metis "http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/metis-${metis_version}.tar.gz" $builddir/metis $METIS_DIR

# VTK
vtk_version=9.2.2
export VTK_DIR=$destdir/vtk-${vtk_version}
$installer_prefix bin/build-vtk "https://www.vtk.org/files/release/${vtk_version%.*}/VTK-${vtk_version}.tar.gz" $builddir/vtk-${vtk_version} $VTK_DIR

# Code_Saturne

cs_version=$(git --git-dir components/code_saturne/.git --work-tree components/code_saturne describe --tags --dirty)
cs_version=$(git --git-dir components/code_saturne/.git --work-tree components/code_saturne describe --tags)
if [[ "$cs_version" =~ dirty && $mode != dev ]]; then
    echo "Cannot build a release version with a dirty Code_Saturne repository" >&2
    exit 1
fi

if [ cs_version[0] = "v" ]; then
    cs_version=${cs_version:1} # strip leading v
fi
export CODE_SATURNE_DIR=$destdir/Code_Saturne

if [ "$mode" = "release" ]; then
    CODE_SATURNE_DIR="${CODE_SATURNE_DIR}-$cs_version"
fi

$installer_prefix bin/build-cs $PWD/components/code_saturne $builddir/code_saturne $CODE_SATURNE_DIR

# LUMA

luma_version=$(git --git-dir components/LUMA/.git --work-tree components/LUMA describe --tags --dirty)
if [[ "$luma_version" =~ dirty && $mode != dev ]]; then
    echo "Cannot build a release version with a dirty LUMA repository" >&2
    exit 1
fi
luma_version=$(git --git-dir components/LUMA/.git --work-tree components/LUMA describe --tags)
luma_version=${luma_version/Release_v/}
LUMA_DIR=$destdir/LUMA
if [ "$mode" = "release" ]; then
    LUMA_DIR="${LUMA_DIR}-$luma_version"
fi

$installer_prefix bin/install-luma $PWD/components/LUMA $LUMA_DIR

# Case definitions

$installer_prefix rsync -a cases/ $destdir/cases/

# Setup script (TODO: maybe make into a module?)

$installer_prefix cat >$destdir/setup.sh <<EOF
module load PrgEnv-gnu
module load cray-python/3.8.5.0

export CS_LUMA_DIR=$destdir
export CODE_SATURNE_DIR=$CODE_SATURNE_DIR
export LUMA_DIR=$LUMA_DIR
export PATH=$destdir/bin:\$LUMA_DIR/bin:\$CODE_SATURNE_DIR/bin:\$PATH
EOF
